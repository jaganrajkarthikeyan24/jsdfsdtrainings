
JPA topics 

Persistance.xml
@Entity
@column
@Table
Sequence table
@GeneratedValue  - auto generation of primary key - id values --  identifiers @Generated ,
Sequence generator
Apply Constrain for table and column value,  eg  unique constrain , null constrain

one to many
many to one
manytomany
onetoone
uni direction , bidirectional , join table.
@Cascade value spefication for JPA


JPA Queries
Named Query
Criteria
Inheritance mapping
Second level cache






JPA Tutorial
JPA tutorial provides basic and advanced concepts of Java Persistence API. 
Our JPA tutorial is designed for beginners and professionals.

JPA is just a specification that facilitates object-relational mapping to manage relational 
data in Java applications. It provides a platform to work directly with objects instead of 
using SQL statements.

JPA Object Relational Mapping
Object Relational Mapping (ORM) is a functionality which is used to develop and maintain a 
relationship between an object and relational database by mapping an object state to database column. It is capable to handle various database operations easily such as inserting, 
updating, deleting etc.

Mapping Directions
Mapping Directions are divided into two parts: -

Unidirectional relationship - In this relationship, only one entity can refer the properties
to another. It contains only one owing side that specifies how an update can be made in the database.

Bidirectional relationship - This relationship contains an owning side as well as 
an inverse side. So here every entity has a relationship field or refer the property to 
other entity.


Following are the various ORM mappings: -

One-to-one - This association is represented by @OneToOne annotation. Here, instance of each entity is related to a single instance of another entity.
One-to-many - This association is represented by @OneToMany annotation. In this relationship, an instance of one entity can be related to more than one instance of another entity.
Many-to-one - This mapping is defined by @ManyToOne annotation. In this relationship, multiple instances of an entity can be related to single instance of another entity.
Many-to-many - This association is represented by @ManyToMany annotation. Here, multiple instances of an entity can be related to multiple instances of another entity. In this mapping, any side can be the owing side.


@Entity - This is a marker annotation which indicates that this class is an entity. This annotation must be placed on the class name.
@Id - This annotation is placed on a specific field that holds the persistent identifying properties. This field is treated as a primary key in database.
Simple Entity Class
import javax.persistence.*;  
@Entity  
public class Student {  
    @Id  
    private int id;  
    private String name;  
    private long fees;  
    public Student() {}  
    public Student(int id)   
     {  
        this.id = id;  
         }  
    public int getId()   
     {  
        return id;  
         }  
    public void setId(int id)   
     {  
        this.id = id;  
         }  
    public String getName()  
     {  
        return name;   
         }  
    public void setName(String name)   
     {  
        this.name = name;  
         }  
    public long getFees()  
     {  
        return fees;  
         }  
    public void setFees (long fees)  
     {  
        this.fees = fees;  
     }   
}  


Steps to persist an entity object.
1) Creating an entity manager factory object

The EntityManagerFactory interface present in java.persistence package is used to provide an entity manager.

EntityManagerFactory emf=Persistence.createEntityManagerFactory("Student_details");  
Persistence - The Persistence is a bootstrap class which is used to obtain an EntityManagerFactory interface.
createEntityManagerFactory() method - The role of this method is to create and return an EntityManagerFactory for the named persistence unit. Thus, this method contains the name of persistence unit passed in the Persistence.xml file.
2) Obtaining an entity manager from factory.

EntityManager em=emf.createEntityManager();  
EntityManager - An EntityManager is an interface
createEntityManager() method - It creates new application-managed EntityManager
3) Intializing an entity manager.

em.getTransaction().begin();  
getTransaction() method - This method returns the resource-level EntityTransaction object.
begin() method - This method is used to start the transaction.
4) Persisting a data into relational database.

em.persist(s1);  
persist() - This method is used to make an instance managed and persistent. An entity instance is passed within this method.
5) Closing the transaction

em.getTransaction().commit();  
6) Releasing the factory resources.

emf.close();  
    em.close();  
close() - This method is used to releasing the factory resources.


Inserting an Entity
In JPA, we can easily insert data into database through entities. The EntityManager provides persist() method to insert records.

JPA Entity Insertion Example
Here, we will insert the record of students.

This example contains the following steps: -

Create an entity class named as StudentEntity.java under com.javatpoint.jpa.student package that contains attributes s_id, s_name, s_age.
StudentEntity.java

package com.javatpoint.jpa.student;  
import javax.persistence.*;  
  
@Entity  
@Table(name="student")  
public class StudentEntity {  
  
    @Id  
    private int s_id;  
    private String s_name;  
    private int s_age;  
      
    public StudentEntity(int s_id, String s_name, int s_age) {  
        super();  
        this.s_id = s_id;  
        this.s_name = s_name;  
        this.s_age = s_age;  
    }  
  
    public StudentEntity() {  
        super();  
    }  
  
    public int getS_id() {  
        return s_id;  
    }  
  
    public void setS_id(int s_id) {  
        this.s_id = s_id;  
    }  
  
    public String getS_name() {  
        return s_name;  
    }  
  
    public void setS_name(String s_name) {  
        this.s_name = s_name;  
    }  
  
    public int getS_age() {  
        return s_age;  
    }  
  
    public void setS_age(int s_age) {  
        this.s_age = s_age;  
    }  
      
}  




https://thorben-janssen.com/jpa-generate-primary-keys/
Generated Identifiers
If we want to automatically generate the primary key value, we can add the @GeneratedValue annotation.
This can use four generation types: AUTO, IDENTITY, SEQUENCE and TABLE.
If we don't explicitly specify a value, the generation type defaults to AUTO.

GenerationType.AUTO
The GenerationType.AUTO is the default generation type and lets the persistence provider choose the generation strategy.
@Id
@GeneratedValue(strategy = GenerationType.AUTO)
private Long id;

If you use Hibernate as your persistence provider, it selects a generation strategy based on the database specific dialect. 
For most popular databases, it selects GenerationType.SEQUENCE which I will explain later.  


GenerationType.IDENTITY
	Follow me on YouTube to not miss any new videos.
The GenerationType.IDENTITY is the easiest to use but not the best one from a performance point of view. 
It relies on an auto-incremented database column and lets the database generate a new value with each insert operation. 
From a database point of view, this is very efficient because the auto-increment columns are highly optimized, 
and it doesn’t require any additional statements.

@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;
This approach has a significant drawback if you use Hibernate. Hibernate requires a primary key value for each managed entity 
and therefore has to perform the insert statement immediately. This prevents it from using different optimization techniques like 
JDBC batching.


GenerationType.SEQUENCE
The GenerationType.SEQUENCE is my preferred way to generate primary key values and uses a database sequence to generate unique 
values.
It requires additional select statements to get the next value from a database sequence. But this has no performance 
impact for most applications. And if your application has to persist a huge number of new entities, you can use some 
Hibernate specific optimizations to reduce the number of statements.
@Id
@GeneratedValue(strategy = GenerationType.SEQUENCE)
private Long id;
If you don’t provide any additional information, Hibernate will request the next value from its default sequence. 
You can change that by referencing the name of a @SequenceGenerator in the generator attribute of the @GeneratedValue annotation.
 The @SequenceGenerator annotation lets you define the name of the generator,
 the name, and schema of the database sequence and the allocation size of the sequence.

@Id
@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "book_generator")
@SequenceGenerator(name="book_generator", sequenceName = "book_seq", allocationSize=50)
private Long id;

GenerationType.TABLE
The GenerationType.TABLE gets only rarely used nowadays. It simulates a sequence by storing and updating its current value in a 
database table which requires the use of pessimistic locks which put all transactions into a sequential order.
This slows down your application, and you should, therefore, prefer the GenerationType.SEQUENCE, 
if your database supports sequences, which most popular databases do.
@Id
@GeneratedValue(strategy = GenerationType.TABLE)
private Long id;


JPA Cascading Operations
In JPA, if any operation is applied on an entity then it will perform on that particular entity only. These operations will not be applicable to the other entities that are related to it.

To establish a dependency between related entities, JPA provides javax.persistence.CascadeType enumerated types that define the cascade operations. These cascading operations can be defined with any type of mapping i.e. One-to-One, One-to-Many, Many-to-One, Many-to-Many.
Cascade Enums
Following are the enums used to perform cascading operations.

Cascade Operations	Description
PERSIST	In this cascade operation, if the parent entity is persisted then all its related entity will also be persisted.
MERGE	In this cascade operation, if the parent entity is merged then all its related entity will also be merged.
DETACH	In this cascade operation, if the parent entity is detached then all its related entity will also be detached.
REFRESH	In this cascade operation, if the parent entity is refreshed then all its related entity will also be refreshed.
REMOVE	In this cascade operation, if the parent entity is removed then all its related entity will also be removed.
ALL	In this case, all the above cascade operations can be applied to the entities related to parent entity.






Now, map the entity class and other databases confiuguration in Persistence.xml file.
Persistence.xml

<persistence>  
<persistence-unit name="Student_details">  
      
    <class>com.javatpoint.jpa.student.StudentEntity</class>  
  
<properties>  
<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver"/>  
<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/studentdata"/>  
<property name="javax.persistence.jdbc.user" value="root"/>  
<property name="javax.persistence.jdbc.password" value=""/>  
<property name="eclipselink.logging.level" value="SEVERE"/>  
<property name="eclipselink.ddl-generation" value="create-or-extend-tables"/>  
</properties>  
  
    </persistence-unit>  
</persistence>  

Create a persistence class named as PersistStudent.java under com.javatpoint.jpa.persist package to persist the entity object with data.
PersistStudent.java


import javax.persistence.*;  
public class PersistStudent {  
      
    public static void main(String args[])  
    {  
          
        EntityManagerFactory emf=Persistence.createEntityManagerFactory("Student_details");  
        EntityManager em=emf.createEntityManager();  
          
em.getTransaction().begin();  
          
        StudentEntity s1=new StudentEntity();  
        s1.setS_id(101);  
        s1.setS_name("Gaurav");  
        s1.setS_age(24);  
          
        StudentEntity s2=new StudentEntity();  
        s2.setS_id(102);  
        s2.setS_name("Ronit");  
        s2.setS_age(22);  
          
        StudentEntity s3=new StudentEntity();  
        s3.setS_id(103);  
        s3.setS_name("Rahul");  
        s3.setS_age(26);  
          
        em.persist(s1);  
        em.persist(s2);  
        em.persist(s3);       
  
em.getTransaction().commit();  
          
        emf.close();  
        em.close();  
          
    }  
}  
Output:

After the execution of the program, the student table is generated under MySQL workbench.
This table contains the student details.To fetch data, run select * from student query in MySQL.

Finding an entity
To find an entity, EntityManger interface provides find() method that searches an element on the basis of primary key.
StudentEntity s=em.find(StudentEntity.class,101);  


Update an Entity
JPA allows us to change the records in database by updating an entity.
StudentEntity s=em.find(StudentEntity.class,102);  


Deleting an Entity
To delete a record from database, EntityManager interface provides remove() method. 
The remove() method uses primary key to delete the particular record.

    StudentEntity s=em.find(StudentEntity.class,102);  
em.remove(s); 





javax.persistence
Annotation UniqueConstraint
Target:
Specifies that a unique constraint is to be included in the generated DDL for a primary or secondary table.
Example:
    @Entity
    @Table(
        name="EMPLOYEE", 
        uniqueConstraints=
            @UniqueConstraint(columnNames={"EMP_ID", "EMP_NAME"})
    )
    public class Employee { ... }


JPA - Applying Unique Constraints by using @Column#unique
@Entity
@Table
public class Employee {
  @Id
  @GeneratedValue
  private long id;
  @Column(unique = true)
  private String name;
  private String dept;
    .............
}




JPA JPQL Introduction
The JPQL (Java Persistence Query Language) is an object-oriented query language which is used to perform database operations on persistent entities. Instead of database table, JPQL uses entity object model to operate the SQL queries. Here, the role of JPA is to transform JPQL into SQL. Thus, it provides an easy platform for developers to handle SQL tasks.

JPQL is an extension of Entity JavaBeans Query Language (EJBQL), adding the following important features to it: -

It can perform join operations.
It can update and delete data in a bulk.
It can perform aggregate function with sorting and grouping clauses.
Single and multiple value result types.
JPQL Features
It is a platform-independent query language.
It is simple and robust.
It can be used with any type of database such as MySQL, Oracle.
JPQL queries can be declared statically into metadata or can also be dynamically built in code.
Creating Queries in JPQL
JPQL provides two methods that can be used to access database records. These methods are: -

Query createQuery(String name) - The createQuery() method of EntityManager interface is used to create an instance
 of Query interface for executing JPQL statement.
Query query = em.createQuery("Select s.s_name from StudentEntity s");  
This method creates dynamic queries that can be defined within business logic.

Query createNamedQuery(String name) - The createNamedQuery() method of EntityManager interface is used to create an 
instance of Query interface for executing named queries.
@NamedQuery(name = "find name" , query = "Select s from StudentEntity s")  
This method is used to create static queries that can be defined in entity class.

Now, we can control the execution of query by the following Query interface methods: -
int executeUpdate() - This method executes the update and delete operation.
int getFirstResult() - This method returns the first positioned result the query object was set to retrieve.
int getMaxResults() - This method returns the maximum number of results the query object was set to retrieve.
java.util.List getResultList() - This method returns the list of results as an untyped list.
Query setFirstResult(int startPosition) - This method assigns the position of first result to retrieve.
Query setMaxResults(int maxResult) - This method assigns the maximum numbers of result to retrieve.


JPA Named Queries
A named query is a statically defined query with a predefined unchangeable query string. Using named queries instead of 
dynamic queries may improve code organization by separating the JPQL query strings from the Java code. It also enforces the use 
of query parameters rather than embedding literals dynamically into the query string and results in more efficient queries.

This page covers the following topics:
@NamedQuery and @NamedQueries Annotations
Using Named Queries at Runtime
@NamedQuery and @NamedQueries Annotations
The following @NamedQuery annotation defines a query whose name is "Country.findAll" that retrieves all the Country objects in
 the database:

@NamedQuery(name="Country.findAll", query="SELECT c FROM Country c") 
The @NamedQuery annotation contains four elements - two of which are required and two are optional. The two required elements, 
name and query define the name of the query and the query string itself and are demonstrated above. The two optional elements, 
lockMode and hints, provide static replacement for the setLockMode and setHint methods.

Every @NamedQuery annotation is attached to exactly one entity class or mapped superclass - usually to the most relevant entity 
class. But since the scope of named queries is the entire persistence unit, names should be selected carefully to avoid collision 
(e.g. by using the unique entity name as a prefix).

It makes sense to add the above @NamedQuery to the Country entity class:

@Entity
@NamedQuery(name="Country.findAll", query="SELECT c FROM Country c") 
public class Country {
  ...
}
Attaching multiple named queries to the same entity class requires wrapping them in a @NamedQueries annotation, as follows:

@Entity

@NamedQueries({
    @NamedQuery(name="Country.findAll",
                query="SELECT c FROM Country c"),
    @NamedQuery(name="Country.findByName",
                query="SELECT c FROM Country c WHERE c.name = :name"),
}) 
public class Country {
  ...
}
Note: Named queries can be defined in JPA XML mapping files instead of using the @NamedQuery annotation. ObjectDB supports 
JPA XML mapping files, including the definition of named queries. But, because mapping files are useful mainly for Object
 Relational Mapping (ORM) JPA providers and less so when using ObjectDB, this alternative is not covered in this manual.
Using Named Queries at Runtime
Named queries are represented at runtime by the same Query and TypedQuery interfaces but different EntityManager factory 
methods are used to instantiate them. The createNamedQuery method receives a query name and a result type and returns a 
TypedQuery instance:

  TypedQuery<Country> query =
      em.createNamedQuery("Country.findAll", Country.class);
  List<Country> results = query.getResultList();
Another form of createNamedQuery receives a query name and returns a Query instance:

  Query query = em.createNamedQuery("Country.findAll");
  List results = query.getResultList();



Inheritance Strategies

Relational databases don't have a straightforward way to map class hierarchies onto database tables.

To address this, the JPA specification provides several strategies:

MappedSuperclass – the parent classes, can't be entities
Single Table – The entities from different classes with a common ancestor are placed in a single table.
Joined Table – Each class has its table, and querying a subclass entity requires joining the tables.
Table per Class – All the properties of a class are in its table, so no join is required.
Each strategy results in a different database structure.

Entity inheritance means that we can use polymorphic queries for retrieving all the subclass entities when querying for a superclass.

Since Hibernate is a JPA implementation, it contains all of the above as well as a few Hibernate-specific features related to inheritance.




Inheritance is the core concept of object oriented language, therefore we can use inheritance relationships or strategies between
 entities. JPA support three types of inheritance strategies such as SINGLE_TABLE, JOINED_TABLE, and TABLE_PER_CONCRETE_CLASS.


import javax.persistence.DiscriminatorColumn;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.Table;

@Entity
@Table
@Inheritance( strategy = InheritanceType.SINGLE_TABLE )
@DiscriminatorColumn( name = "type" )

public class Staff implements Serializable {
   @Id
   @GeneratedValue( strategy = GenerationType.AUTO )
   
   private int sid;
   private String sname;
   
   public Staff( int sid, String sname ) {
      super( );
      this.sid = sid;
      this.sname = sname;
   }
   
   public Staff( ) {
      super( );
   }
   
   public int getSid( ) {
      return sid;
   }
   
   public void setSid( int sid ) {
      this.sid = sid;
   }
   
   public String getSname( ) {
      return sname;
   }
   
   public void setSname( String sname ) {
      this.sname = sname;
   }
}
In the above code @DescriminatorColumn specifies the field name (type) and the values of it shows the remaining (Teaching and NonTeachingStaff) fields.

Create a subclass (class) to Staff class named TeachingStaff.java under the com.tutorialspoint.eclipselink.entity package. The TeachingStaff Entity class is shown as follows:

package com.tutorialspoint.eclipselink.entity;

import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;

@Entity
@DiscriminatorValue( value="TS" )
public class TeachingStaff extends Staff {

   private String qualification;
   private String subjectexpertise;

   public TeachingStaff( int sid, String sname, 
   
   String qualification,String subjectexpertise ) {
      super( sid, sname );
      this.qualification = qualification;
      this.subjectexpertise = subjectexpertise;
   }

   public TeachingStaff( ) {
      super( );
   }

   public String getQualification( ){
      return qualification;
   }

   public void setQualification( String qualification ){
      this.qualification = qualification;
   }

   public String getSubjectexpertise( ) {
      return subjectexpertise;
   }

   public void setSubjectexpertise( String subjectexpertise ){
      this.subjectexpertise = subjectexpertise;
   }
}
Create a subclass (class) to Staff class named NonTeachingStaff.java under the com.tutorialspoint.eclipselink.entity package. The NonTeachingStaff Entity class is shown as follows:

package com.tutorialspoint.eclipselink.entity;

import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;

@Entity
@DiscriminatorValue( value = "NS" )

public class NonTeachingStaff extends Staff {
   private String areaexpertise;

   public NonTeachingStaff( int sid, String sname, String areaexpertise ) {
      super( sid, sname );
      this.areaexpertise = areaexpertise;
   }

   public NonTeachingStaff( ) {
      super( );
   }

   public String getAreaexpertise( ) {
      return areaexpertise;
   }

   public void setAreaexpertise( String areaexpertise ){
      this.areaexpertise = areaexpertise;
   }
}



History of criteria API
The criteria API is included into all versions of JPA therefore each step of criteria API is notified in the specifications of JPA.

In JPA 2.0, the criteria query API, standardization of queries are developed.
In JPA 2.1, Criteria update and delete (bulk update and delete) are included.
Criteria Query Structure
The Criteria API and the JPQL are closely related and are allowed to design using similar operators in their queries. It follows javax.persistence.criteria package to design a query. The query structure means the syntax criteria query.

The following simple criteria query returns all instances of the entity class in the data source.

EntityManager em = ...;
CriteriaBuilder cb = em.getCriteriaBuilder();

CriteriaQuery<Entity class> cq = cb.createQuery(Entity.class);
Root<Entity> from = cq.from(Entity.class);

cq.select(Entity);
TypedQuery<Entity> q = em.createQuery(cq);
List<Entity> allitems = q.getResultList();






------------------

Inheritance mapping

Relational databases don't have a straightforward way to map class hierarchies onto database tables.

To address this, the JPA specification provides several strategies:

MappedSuperclass – the parent classes, can't be entities
Single Table – The entities from different classes with a common ancestor are placed in a single table.
Joined Table – Each class has its table, and querying a subclass entity requires joining the tables.
Table per Class – All the properties of a class are in its table, so no join is required.

https://www.baeldung.com/hibernate-inheritance
https://stackabuse.com/guide-to-jpa-with-hibernate-inheritance-mapping/ --- proper


JPA - Table per Class Inheritance Strategy

In this strategy, the superclass and subclasses in a hierarchy are mapped to different individual tables.
All super/subclasses tables store all fields of that class plus the ones which are inherited from the super class.
The annotation @Inheritance is used on the root entity class with
strategy = InheritanceType.TABLE_PER_CLASS.
@DiscriminatorColumn and @DiscriminatorValue are not required to be used in this strategy.
@Entity and other meta-data annotations are used on the root and subclasses as usual.
@Id field should only be defined in the root class.
The root class can be abstract or a concrete class.
For JPA implementations, support for the table per concrete class inheritance mapping strategy is optional.
 That means applications that use this mapping strategy might not be portable.
This strategy has the disadvantage of repeating same attributes in the tables. This strategy also uses SQL UNION 
queries (or a separate SQL query per subclass). When the concrete subclass is not known, the related object could be 
in any of the subclass tables, making joins through the relation impossible, 
hence providing poor support for polymorphic relationships.



@MappedSuperclass
The JPA standard specification defines the @MappedSuperclass annotation to allow an entity to inherit properties from a base class.

Unlike the @Inheritance annotation which maps the Java Object inheritance to a relational database model which emulates 
inheritance, @MappedSuperclass only models inheritance in the OOP world.

From a database perspective, the @MappedSuperclass inheritance model is invisible since all the base class properties are 
simply copied to the database table mapped by the actual entity class.

Therefore, we can define the following BaseEntity base class:

@MappedSuperclass
public class BaseEntity {
 
    @Id
    @GeneratedValue
    private Long id;
 
    @Version
    private Integer version;
 
    //Getters and setters omitted for brevity
}

Now, our entities can extend the BasedEntity class and skip declaring the @Id or @Version properties since they are inherited 
from the base class. If the BaseEntity were not annotated with @MappedSuperclass, the @Id or @Version properties would not be 
inherited by the classes extending BasedEntity.

Post entity
@Entity(name = "Post")
@Table(name = "post")
public class Post extends BaseEntity {
 
    private String title;
 
    @OneToMany(
        mappedBy = "post",
        cascade = CascadeType.ALL,
        orphanRemoval = true
    )
    private List comments = new ArrayList();
 
    @OneToOne(
        mappedBy = "post",
        cascade = CascadeType.ALL,
        orphanRemoval = true,
        fetch = FetchType.LAZY
    )
    private PostDetails details;
 
    @ManyToMany
    @JoinTable(
        name = "post_tag",
        joinColumns = @JoinColumn(name = "post_id"),
        inverseJoinColumns = @JoinColumn(name = "tag_id")
    )
    private Set tags = new HashSet();
 
    //Getters and setters omitted for brevity
 
    public void addComment(PostComment comment) {
        comments.add(comment);
        comment.setPost(this);
    }
 
    public void addDetails(PostDetails details) {
        this.details = details;
        details.setPost(this);
    }
 
    public void removeDetails() {
        this.details.setPost(null);
        this.details = null;
    }
}
Note that we are using mappedBy @OneToMany associations because this is the best way to map this type of relationship.

